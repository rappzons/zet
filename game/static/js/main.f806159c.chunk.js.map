{"version":3,"sources":["scripts/newGame.js","scripts/utils.js","scripts/player/characters.js","scripts/player/player.js","scripts/world-1-1/createWorld.js","scripts/objectFactory.js","scripts/genericScenes/BootScene.js","scripts/genericScenes/StatsScene.js","App.js","serviceWorker.js","index.js"],"names":["main","parentElementId","scenes","config","type","Phaser","AUTO","width","height","backgroundColor","parent","physics","default","matter","debug","scene","Game","Rect","x","y","w","h","this","containsPoint","point","intersects","rectangle","intersectsBounds","bounds","rect","min","max","random","Math","floor","AdventureGuy","spriteSheet","hitBoxWidth","hitBoxHeight","totalFrames","friction","frictionAir","mass","bounce","maxSpeed","jumpForce","accelerationForce","accelerationForceAir","scale","minTimeBetweenJumpsMs","meleeAttack","damage","thrustForce","animationKey","deltaX","deltaY","types","createAnimations","gameWorld","key","frames","anims","generateFrameNumbers","start","end","yoyo","frameRate","repeatDelay","delay","repeat","Bingo","chooseCharacters","characterId","playerCharacter","WORLD_CONSTANTS","STATES","Player","state","Set","status","health","maxHealth","level","xp","cursors","playerSprite","hitBox","meleeButtonReleased","lastJumpTimeStamp","jumpButtonReleased","init","bodies","zetParent","debugFeetRectangle","isSensor","meleeAttackHitBoxRight","meleeAttackHitBoxLeft","playerParts","body","create","parts","add","sprite","setScale","setExistingBody","setOrigin","setFriction","setFrictionAir","setFixedRotation","setMass","setBounce","setPosition","on","animation","frame","gameObject","textureFrame","checkAttackInteraction","isLast","delete","fxFactory","play","input","keyboard","createCursorKeys","forEach","a","onGameUpdate","absVelocityX","abs","getVelocity","absVelocityY","processCurrentPlayerState","processInput","setPlayerAnimations","onCollide","collider","zData","zType","includes","destroy","velocity","getPlayerStats","STATE","join","STATUS","SPEED","tryJump","has","window","performance","now","thrustLeft","tryMeleeAttack","tryMove","inputData","direction","airborne","thrust","thrustBack","flipX","setTimeScale","space","isDown","left","right","up","isUp","playerState","checkPlayerInteractions","interActionStatus","onGround","children","list","obj","part","calcRect","console","log","damageData","angle","onDamage","Level1_1Scene","active","objectFactory","gameEngine","_","preLoad","load","spritesheet","frameWidth","frameHeight","createInteractiveBall","radius","imageKey","ball","isStatic","setCircle","setDensity","zHealth","spawnBlueSlime","blue_slime","density","setRectangle","slimesGameWorld","createStaticEnemy","enemyId","demon","ObjectFactory","audio","image","world","setBounds","tileSprite","createGround","game","canvas","sound","audioPlayDelay","Audio","objects","i","time","addEvent","callback","createBall","bind","callbackScope","player","Object","event","pairs","pair","bodyA","bodyB","ground","render","setStatic","Scene","BootScene","loadingImage","clickHandler","setInteractive","level_1_1","remove","w2","StatsScene","statsInfo","text","font","fill","setDepth","worldScene","get","stats","setText","App","useEffect","newGame","id","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f806159c.chunk.js","sourcesContent":["/*\n * Initialise the Game engine and the Renderer.\n */\nimport Phaser from 'phaser';\n\nconst main = (parentElementId, scenes) => {\n\n    const config = {\n        type: Phaser.AUTO,\n        width: 1600,\n        height: 800,\n        backgroundColor: '#030303',\n        parent: parentElementId,\n        physics: {\n            default: 'matter',\n            matter: {\n                debug: true\n            }\n        },\n        scene: scenes\n    };\n\n    return new Phaser.Game(config);\n};\n\nexport default main;\n\n\n","\nexport const Rect = function (x, y, w, h) {\n\n    this.x = x;\n    this.y = y;\n    this.width = w;\n    this.height = h;\n\n    this.containsPoint = function (point) {\n        return this.x <= point.x && point.x <= this.x + this.width &&\n            this.y <= point.y && point.y <= this.y + this.height;\n    }\n\n    this.intersects = function (rectangle) {\n\n        /**\n         * if (this.Left < rectangle.Right && this.Right > rectangle.Left &&\n         this.Top > rectangle.Bottom && this.Bottom < rectangle.Top )\n         */\n        return this.x < (rectangle.x + rectangle.width) && (this.x + this.width) > rectangle.x &&\n            (this.y + this.height) > rectangle.y && this.y < (rectangle.y + rectangle.height);\n    }\n    this.intersectsBounds = function(bounds) {\n\n        const rect = {\n            x: bounds.min.x,\n            y: bounds.min.y,\n            width: bounds.max.x - bounds.min.x,\n            height: bounds.max.y - bounds.min.y,\n        };\n\n        return this.intersects(rect);\n    }\n};\nexport const random = (min, max) => {\n    return Math.floor(Math.random() * (max-min)) + min;\n\n}","const AdventureGuy = {\n    spriteSheet: './assets/sprites/adventure-player.png',\n    width: 50,\n    height: 37,\n    hitBoxWidth: 18,\n    hitBoxHeight: 30,\n    totalFrames: 109,\n    friction: 0.08,\n    frictionAir: 0.001,\n    mass: 40,\n    bounce: 0.015,\n    maxSpeed: 8,\n    jumpForce: 1.7,\n    accelerationForce: 0.067,\n    accelerationForceAir: 0.015,\n    scale: 2,\n    minTimeBetweenJumpsMs: 700,\n\n    // TODO: put all different attacks into an array of generic attack-objects. Should perhaps also put the animation here?\n    meleeAttack: {\n        width: 18,\n        height: 20,\n        damage: 35,\n        thrustForce: 0.015,\n        // Which animation key should trigger the damage\n        animationKey: 50,\n        deltaX: 0,\n        deltaY: 0,\n        types: ['slash', 'melee'],\n    },\n\n\n    createAnimations: function (gameWorld) {\n\n        const animations =\n            [\n                {\n                    key: 'still',\n                    frames: gameWorld.anims.generateFrameNumbers('player', {start: 0, end: 1}),\n                    yoyo: true,\n                    frameRate: 1,\n                    repeatDelay: 3000,\n                    delay: 1000,\n                    repeat: -1\n                },\n                {\n                    key: 'running',\n                    frames: gameWorld.anims.generateFrameNumbers('player', {start: 8, end: 13}),\n                    frameRate: 10,\n                    repeat: -1\n                },\n                {\n                    key: 'in-air-up',\n                    frames: gameWorld.anims.generateFrameNumbers('player', {start: 16, end: 18}),\n                    repeat: -1,\n                },\n                {\n                    key: 'in-air-falling',\n                    frames: gameWorld.anims.generateFrameNumbers('player', {start: 22, end: 23}),\n                    repeat: -1,\n                },\n                {\n                    key: 'melee-attack',\n                    frames: gameWorld.anims.generateFrameNumbers('player', {start: 48, end: 52}),\n                    frameRate: 14,\n                    repeat: 0,\n                }\n            ];\n\n        return animations;\n    },\n};\n\nconst Bingo = {\n    spriteSheet: './assets/test-dummy.png',\n    width: 50,\n    height: 80,\n    hitBoxWidth: 50,\n    hitBoxHeight: 94,\n    totalFrames: 4,\n    friction: 0.07,\n    frictionAir: 0.002,\n    mass: 50,\n    bounce: 0.015,\n    maxSpeed: 8,\n    jumpForce: 1.7,\n    accelerationForce: 0.070,\n    accelerationForceAir: 0.002,\n    scale: 1,\n    minTimeBetweenJumpsMs: 700,\n\n    // TODO: put all different attacks into an array of generic attack-objects. Should perhaps also put the animation here?\n    meleeAttack: {\n        width: 50,\n        height: 50,\n        deltaX: 0,\n        deltaY: 15,\n        damage: 35,\n        thrustForce: 0.025,\n        // Which animation key should trigger the damage\n        animationKey: 1,\n        types: ['melee'],\n    },\n\n\n    createAnimations: function (gameWorld) {\n\n        const animations =\n            [\n                {\n                    key: 'still',\n                    frames: gameWorld.anims.generateFrameNumbers('test_dummy', {start: 0, end: 3}),\n                    yoyo: true,\n                    frameRate: 1,\n                    repeatDelay: 3000,\n                    delay: 500,\n                    repeat: -1\n                },\n                {\n                    key: 'running',\n                    frames: gameWorld.anims.generateFrameNumbers('test_dummy', {start: 0, end: 1}),\n                    frameRate: 10,\n                    repeat: -1\n                },\n                {\n                    key: 'in-air-up',\n                    frames: gameWorld.anims.generateFrameNumbers('test_dummy', {start: 1, end: 1}),\n                    repeat: -1,\n                },\n                {\n                    key: 'in-air-falling',\n                    frames: gameWorld.anims.generateFrameNumbers('test_dummy', {start: 1, end: 1}),\n                    repeat: -1,\n                },\n                {\n                    key: 'melee-attack',\n                    frames: gameWorld.anims.generateFrameNumbers('test_dummy', {start: 0, end: 1}),\n                    frameRate: 14,\n                    repeat: 0,\n                }\n            ];\n\n        return animations;\n    },\n};\nconst chooseCharacters = function (characterId) {\n\n    switch (characterId) {\n        case 'adventure-guy':\n            return AdventureGuy;\n        case 'bingo':\n            return Bingo;\n        default:\n            return AdventureGuy;\n    }\n\n};\n\n\nexport default chooseCharacters;","import {Rect} from '../utils'\nimport chooseCharacters from \"../player/characters\";\n\nconst playerCharacter = chooseCharacters('bingo');\n\nconst WORLD_CONSTANTS = {\n    //If velocity goes below this value its considered to be ZERO\n    MINIMUM_VELOCITY: 0.5,\n    //IF a force is less than this value it is considered to be no force at all\n    MINIMUM_FORCE: 0.01,\n};\nconst STATES = {\n    ON_GROUND: 'on-ground',\n    STILL: 'still',\n    MOVING: 'moving',\n    IN_AIR: 'in-air',\n    LEFT_FACING: 'left-facing',\n    RIGHT_FACING: 'right-facing',\n    FALLING: 'falling',\n    MELEE_ATTACKING: 'melee-attacking',\n};\n\nconst Player = {\n\n    type: ['player', 'character', 'collidable'],\n    state: new Set([]),\n    status: {\n        health: 100,\n        maxHealth: 100,\n        level: 1,\n        xp: 0,\n    },\n    cursors: {},\n    playerSprite: {}, // GameEngine sprite representation\n    hitBox: {}, // GameEngine physics\n\n\n    meleeButtonReleased: true,\n    // TODO: perhaps find a better way to prevent \"jump spamming\", works for now...\n    lastJumpTimeStamp: 0,\n    jumpButtonReleased: true,\n\n    //Initialise animations and event listeners\n    init(gameWorld) {\n\n        this.gameWorld = gameWorld;\n        this.hitBox = gameWorld.matter.bodies.rectangle(0, 0, playerCharacter.hitBoxWidth * playerCharacter.scale, playerCharacter.hitBoxHeight * playerCharacter.scale);\n        this.hitBox.zetParent = this;\n        // This is the feet hitbox. It determines if the player is standing on something\n        this.debugFeetRectangle = gameWorld.matter.bodies.rectangle(0, (playerCharacter.hitBoxHeight / 2) * playerCharacter.scale, (playerCharacter.hitBoxWidth - 2) * playerCharacter.scale, 2 * playerCharacter.scale, {\n            isSensor: true,\n        });\n\n        this.meleeAttackHitBoxRight = gameWorld.matter.bodies.rectangle(playerCharacter.meleeAttack.deltaX + 30, playerCharacter.meleeAttack.deltaY, (playerCharacter.meleeAttack.width) * playerCharacter.scale, playerCharacter.meleeAttack.height * playerCharacter.scale, {\n            isSensor: true,\n        });\n\n        this.meleeAttackHitBoxLeft = gameWorld.matter.bodies.rectangle(-30 - playerCharacter.meleeAttack.deltaX, playerCharacter.meleeAttack.deltaY, (playerCharacter.meleeAttack.width) * playerCharacter.scale, playerCharacter.meleeAttack.height * playerCharacter.scale, {\n            isSensor: true,\n        });\n\n        const playerParts = gameWorld.matter.body.create({\n            parts: [this.hitBox, this.debugFeetRectangle, this.meleeAttackHitBoxLeft, this.meleeAttackHitBoxRight]\n        });\n\n        this.playerSprite = gameWorld.matter.add.sprite(0, 0, 'player').setScale(playerCharacter.scale);\n\n        // Reference to the game world to be able to invoke callback methods on this Player Object\n        this.playerSprite.body.zetParent = this;\n\n        this.playerSprite.setExistingBody(playerParts);\n\n        this.playerSprite.setOrigin(0.5, 0.6);\n        this.playerSprite.setFriction(playerCharacter.friction);\n        this.playerSprite.setFrictionAir(playerCharacter.frictionAir);\n        this.playerSprite.setFixedRotation();\n        this.playerSprite.setMass(playerCharacter.mass);\n        this.playerSprite.setBounce(playerCharacter.bounce);\n        this.playerSprite.setPosition(200, 110);\n\n        // See for event keys: https://photonstorm.github.io/phaser3-docs/Phaser.Animations.Events.html\n        this.playerSprite.on('animationupdate-melee-attack', (animation, frame, gameObject) => {\n            // console.log(\"animationcomplete-melee-attack\", window.performance.now(), frame, gameObject);\n\n\n            // only check interaction when the correct animation frame is in play TOOD: can this be skipped in case of bad performance? perhaps don't rely on frame checking here...but if not the attack will continue to hit as long as the animation is playing\n            if (frame.textureFrame === playerCharacter.meleeAttack.animationKey) {\n               // console.log(\"animationcomplete-melee-attack DONE\");\n                this.checkAttackInteraction(this.gameWorld);\n            }\n\n            // Keep the state until finished\n            if (frame.isLast) {\n                //console.log(\"animationcomplete-melee-attack LAST\");\n                this.state.delete(STATES.MELEE_ATTACKING);\n            }\n\n        }, this);\n\n        this.playerSprite.on('animationcomplete', (animation, frame) => {\n            //console.log(\"animationcomplete\", window.performance.now(), frame);\n            if (animation.key === 'melee-attack') {\n\n                this.checkAttackInteraction(this.gameWorld);\n                this.state.delete(STATES.MELEE_ATTACKING);\n            }\n        }, this);\n\n        this.playerSprite.on('animationstart-melee-attack', (animation, frame) => {\n            //console.log(\"Play attack SOUND NOW!\", window.performance.now(), frame);\n\n            gameWorld.fxFactory['sword-swing'].play();\n\n        }, this);\n\n        this.cursors = gameWorld.input.keyboard.createCursorKeys();\n\n        playerCharacter.createAnimations(gameWorld).forEach((a) => {\n                gameWorld.anims.create(a);\n            }\n        );\n    },\n\n    /**\n     * World tick-event\n     * @param gameWorld\n     */\n    onGameUpdate: function (gameWorld) {\n\n        const absVelocityX = Math.abs(this.getVelocity().x);\n        const absVelocityY = Math.abs(this.getVelocity().y);\n\n        // Order is important here, first check current state:\n        this.processCurrentPlayerState(gameWorld, {absVelocityX, absVelocityY});\n\n        // Then process any new user-input\n        this.processInput({absVelocityX});\n\n        // Then decide what the user is supposed to be looking like\n        this.setPlayerAnimations(gameWorld, {absVelocityX});\n    },\n\n    // Callback that something hit the Player\n    onCollide(collider) {\n\n        // hit something edible\n        if (collider.zData && collider.zData.zType.includes('edible')) {\n            // console.log(\"Eating: \", collider);\n            if (collider.gameObject) {\n                collider.gameObject.destroy();\n                this.status.xp = this.status.xp + 1;\n            }\n        }\n    },\n\n\n\n    getVelocity() {\n        if (this.playerSprite && this.playerSprite.body && this.playerSprite.body.velocity) {\n            return this.playerSprite.body.velocity;\n        }\n        return {x: 0, y: 0}\n    },\n    getPlayerStats: function () {\n        return {\n            STATE: [...this.state].join(\",\"),\n            STATUS: this.status,\n            SPEED: \"X:\" + this.getVelocity().x + \",Y:\" + this.getVelocity().y,\n        }\n    },\n\n    tryJump: function () {\n        if (this.state.has(STATES.ON_GROUND) &&\n            this.lastJumpTimeStamp < (window.performance.now() - playerCharacter.minTimeBetweenJumpsMs) && this.jumpButtonReleased) {\n            this.lastJumpTimeStamp = window.performance.now();\n            this.jumpButtonReleased = false;\n            this.playerSprite.thrustLeft(playerCharacter.jumpForce);\n        }\n    },\n    tryMeleeAttack: function () {\n        if (this.meleeButtonReleased) {\n            this.state.add(STATES.MELEE_ATTACKING);\n            this.meleeButtonReleased = false;\n        }\n    },\n    tryMove: function (inputData, direction) {\n        const airborne = this.state.has(STATES.IN_AIR);\n\n        if (inputData.absVelocityX < playerCharacter.maxSpeed) {\n            direction === 'right' ?\n                this.playerSprite.thrust(airborne ? playerCharacter.accelerationForceAir : playerCharacter.accelerationForce) :\n                this.playerSprite.thrustBack(airborne ? playerCharacter.accelerationForceAir : playerCharacter.accelerationForce);\n            this.state.delete(direction === 'right' ? STATES.LEFT_FACING : STATES.RIGHT_FACING);\n            this.state.add(direction === 'right' ? STATES.RIGHT_FACING : STATES.LEFT_FACING);\n            this.state.add(STATES.MOVING);\n        }\n\n\n    },\n    /**\n     * Set animation depending on player states\n     */\n    setPlayerAnimations: function (gameWorld, inputData) {\n\n        // If melee attacking\n        if (this.state.has(STATES.MELEE_ATTACKING)) {\n            // console.log(\"Attack start\", window.performance.now());\n            this.playerSprite.anims.play('melee-attack', true);\n        }\n        //If airborne\n        else if (this.state.has(STATES.IN_AIR)) {\n\n            if (this.state.has(STATES.FALLING)) {\n                this.playerSprite.anims.play('in-air-falling', true);\n            } else {\n                this.playerSprite.anims.play('in-air-up', false);\n            }\n        }\n        //If on ground\n        else if (this.state.has(STATES.ON_GROUND)) {\n\n            if (this.state.has(STATES.MOVING)) {\n                this.playerSprite.anims.play('running', true);\n            } else {\n                this.playerSprite.anims.play('still', true);\n            }\n        }\n\n        // This is for sprite sheet that does not contain flipped images of the same animation\n        this.playerSprite.flipX = this.state.has(STATES.LEFT_FACING);\n\n        //TODO: this slows down/speeds up animation frames based on velocity, is very dependant on the graphical frames (the pics)\n        if (this.state.has(STATES.MOVING) && !this.state.has(STATES.MELEE_ATTACKING)) {\n\n            this.playerSprite.anims.setTimeScale(Math.max(inputData.absVelocityX / 4, 0.5));\n        } else {\n            this.playerSprite.anims.setTimeScale(1);\n        }\n    },\n\n    // Process user input (move, jump, shoot etc etc)\n    processInput: function (inputData) {\n\n        if (this.cursors.space.isDown) {\n            this.tryMeleeAttack();\n        } else if (this.cursors.left.isDown) {\n            this.tryMove(inputData, 'left');\n        } else if (this.cursors.right.isDown) {\n            this.tryMove(inputData, 'right');\n        }\n\n        if (this.cursors.up.isDown) {\n            this.tryJump();\n        }\n\n        this.jumpButtonReleased = this.cursors.up.isUp;\n        this.meleeButtonReleased = this.cursors.space.isUp;\n    },\n\n    /**\n     * Set current state of the player according to what the player is doing before entering this method.\n     *\n     * Set new player states depending on what is happened to the player. \"Is he moving, is he dead, is he in the air...\"\n     *\n     * @param gameWorld\n     * @param playerState\n     */\n    processCurrentPlayerState(gameWorld, playerState) {\n\n        // Set \"is on ground\" states\n        this.checkPlayerInteractions(gameWorld);\n\n        // Check if player is moving in any direction\n        if (playerState.absVelocityX > WORLD_CONSTANTS.MINIMUM_VELOCITY || playerState.absVelocityY > WORLD_CONSTANTS.MINIMUM_VELOCITY) {\n            this.state.delete(STATES.STILL);\n            this.state.add(STATES.MOVING);\n\n            // Check if player is airborne and if he is falling or not\n            if (this.getVelocity().y > WORLD_CONSTANTS.MINIMUM_VELOCITY && this.state.has(STATES.IN_AIR)) {\n                this.state.add(STATES.FALLING);\n            } else {\n                this.state.delete(STATES.FALLING);\n            }\n        }\n        // Player is not moving\n        else {\n            this.state.delete(STATES.MOVING);\n            if (!this.state.has(STATES.IN_AIR)) {\n                this.state.add(STATES.STILL);\n            }\n        }\n    },\n\n    /**\n     * Check player interactions such as:\n     *  - If the player feet is touching something\n     *  - If any player action is affecting any world object, like a sword hitting an enemy\n     */\n    checkPlayerInteractions: function (gameWorld) {\n        const interActionStatus = {\n            onGround: false,\n        };\n\n        gameWorld.children.list.forEach((obj) => {\n\n            if (obj.body && obj.body.zData && obj.body.parts) {\n\n                // Check if feet is touching ground\n\n                obj.body.parts.forEach((part) => {\n\n                    part.calcRect = new Rect(part.bounds.min.x, part.bounds.min.y,\n                        part.bounds.max.x - part.bounds.min.x,\n                        part.bounds.max.y - part.bounds.min.y);\n\n                    // Check if feet is touching ground\n                    if (obj.body.zData.zType.includes('dead-object') && part.calcRect.intersectsBounds(this.debugFeetRectangle.bounds)) {\n                        interActionStatus.onGround = true;\n                    }\n\n\n                })\n            }\n        });\n\n        if (interActionStatus.onGround) {\n            this.state.add(STATES.ON_GROUND);\n            this.state.delete(STATES.IN_AIR)\n        } else {\n            this.state.delete(STATES.ON_GROUND);\n            this.state.add(STATES.IN_AIR)\n        }\n\n        return interActionStatus;\n    },\n    checkAttackInteraction: function (gameWorld) {\n\n        if (!this.state.has(STATES.MELEE_ATTACKING)) {\n            return;\n        }\n\n        gameWorld.children.list.forEach((obj) => {\n\n                // check if player has whacked anything vulnerable.\n                if (obj.body && obj.body.zData && obj.body.zData.zType.includes('melee-vulnerable') && obj.body.parts) {\n\n                    obj.body.parts.forEach((part) => {\n                            const hit = this.state.has(STATES.LEFT_FACING) ? part.calcRect.intersectsBounds(this.meleeAttackHitBoxLeft.bounds) : part.calcRect.intersectsBounds(this.meleeAttackHitBoxRight.bounds);\n\n                            if (hit) {\n                                console.log(\"Player whacked: \", part, obj);\n                                gameWorld.fxFactory['hit-ball'].play();\n\n                                this.status.xp = this.status.xp + 1;\n\n                                const damageData = {\n                                    thrustForce: playerCharacter.meleeAttack.thrustForce,\n                                    damage: playerCharacter.meleeAttack.damage,\n                                    types: playerCharacter.meleeAttack.damage.types\n                                };\n                                if (this.state.has(STATES.LEFT_FACING)) {\n                                    damageData.angle = 225;\n                                } else {\n                                    damageData.angle = 135;\n                                }\n\n                                // Tell the victim that it has been damaged\n                                if (obj.body.zData.onDamage) {\n                                    obj.body.zData.onDamage(damageData);\n                                }\n\n                            }\n                        }\n                    );\n                }\n            }\n        );\n    },\n};\n\nexport default Player;","import {Scene} from \"phaser\";\nimport Player from \"../player/player\";\nimport chooseCharacters from \"../player/characters\";\nimport {random} from '../utils';\nimport ObjectFactory from '../objectFactory';\n\nconst playerCharacter = chooseCharacters('adventure-guy');\n\nexport default class Level1_1Scene extends Scene {\n    constructor() {\n        super({\n            key: 'level-1-1',\n            active: true\n        });\n\n        this.objectFactory = ObjectFactory(this);\n    }\n\n    preload() {\n        console.log(\"Loading World 1-1 resources\");\n        this.load.audio('sword-swing', './assets/sounds/sword-swing-3.mp3');\n        this.load.audio('hit-ball', './assets/sounds/hit-slime.wav');\n\n        this.load.image('ground', './assets/world/grounds/debug_ground.png');\n        this.load.image('tileset', './assets/world/grounds/old-dark-castle-interior-tileset.png');\n        this.load.image('stone_ground', './assets/world/grounds/stone_ground.png');\n        this.load.image('background', './assets/world/grounds/background_1.png');\n\n\n        this.objectFactory._.preLoad();\n\n        // TODO: would be nice to let the player actually pre-load this...\n        this.load.spritesheet('player',\n            playerCharacter.spriteSheet,\n            {frameWidth: playerCharacter.width, frameHeight: playerCharacter.height},null, playerCharacter.totalFrames\n        );\n    }\n\n    create() {\n\n        this.objectFactory._.load();\n\n        this.matter.world.setBounds(0,-500,1600,1300);\n\n        this.add.tileSprite(800, 700, 1600, 160, 'background');\n\n        this.createGround('stone_ground', this.game.canvas.width/2, 796, this.game.canvas.width, 21);\n\n        console.log(\"sound: \", this.sound)\n        this.sound.audioPlayDelay = 0.0;\n\n        this.fxFactory = {\n\n            // could use Phasers built in sound manager...\n            //'hit-ball' : this.sound.add('sword-swing'),\n            'sword-swing' : new Audio('./assets/sounds/sword-swing-3.mp3'),\n            'hit-ball' : new Audio('./assets/sounds/hit-ball.wav'),\n            //'sword-swing' : this.sound.add('sword-swing'),\n        }\n\n        const objects = random(5, 10);\n       for(var i=0; i<objects; i++) {\n      //      this.createGround('stone_ground', random(0,this.game.canvas.width) - 200 ,random(300,this.game.canvas.height-200), 48 * random(1,10), 21);\n       }\n\n        this.createGround('stone_ground', 300 , 750, 100, 120);\n\n        this.createGround('stone_ground', 500 , 650, 80, 40);\n\n        this.createGround('stone_ground', 700 , 750, 100, 120);\n\n        console.log(\"Created World 1-1, starting to spawn virus balls\");\n        this.time.addEvent({ delay: 3250, callback: this.createBall.bind(this), callbackScope: this, repeat: 4012 });\n\n\n        console.log(\"Created World 1-1, adding player\");\n\n        this.player = Object.create(Player);\n        this.player.init(this);\n\n        this.matter.world.on('collisionstart', function (event) {\n            var pairs = event.pairs;\n\n            pairs.forEach((pair) => {\n\n                const bodyA = pair.bodyA;\n                const bodyB = pair.bodyB;\n\n                if(bodyA.zetParent && bodyA.zetParent.type.includes('collidable')) {\n                    bodyA.zetParent.onCollide(bodyB);\n                }\n                else if(bodyB.zetParent && bodyB.zetParent.type.includes('collidable')) {\n                    bodyB.zetParent.onCollide(bodyA);\n                }\n            });\n        });\n\n        console.log(\"Created World 1-1, adding a static enemy\");\n        this.objectFactory._.createStaticEnemy(this.game.canvas.width - 150, this.game.canvas.height-200,'test_dummy', 500);\n    }\n\n    createGround(image, x,y,w,h) {\n\n        const ground = this.add.tileSprite(x, y, w,h, image);\n\n        this.matter.add.gameObject(ground,{\n            isStatic: true,\n            render: {\n                sprite: {\n                    //yOffset: 0.1\n                }\n            }\n        }).setStatic(true);\n\n        ground.body.zData = {\n            zType: ['dead-object'],\n        };\n\n        return ground;\n    }\n\n    createBall() {\n        if(random(1,3) === 1) {\n            return this.objectFactory._.spawnBlueSlime(random(100, 800), -100, 10);\n       }\n\n        return this.objectFactory._.createInteractiveBall(random(100,800),-100, 10,'virus_ball', 100);\n    }\n\n    update() {\n       this.player.onGameUpdate(this);\n\n       if(this.children) {\n           this.children.list.forEach((obj) => {\n               if (obj?.body?.zData?.onGameUpdate) {\n                   obj.body.zData.onGameUpdate(this);\n               }\n           });\n       }\n    }\n\n}","export default function ObjectFactory(gameEngine) {\n\n\n    // Then return factory methods. Referenced by _\n    return {\n        _: {\n            preLoad: () => {\n\n                gameEngine.load.spritesheet('virus_ball',\n                    './assets/sprites/virus_ball_multi.png',\n                    {frameWidth: 32, frameHeight: 32});\n\n                gameEngine.load.spritesheet('blue_demon',\n                    './assets/sprites/enemies/blue-demon/demon-idle.png',\n                    {frameWidth: 160, frameHeight: 144});\n\n                gameEngine.load.spritesheet('blue_slime',\n                    './assets/sprites/enemies/blue-slime.png',\n                    {frameWidth: 32, frameHeight: 25});\n\n                gameEngine.load.spritesheet('test_dummy',\n                    './assets/sprites/test-dummy.png',\n                    {frameWidth: 150, frameHeight: 96});\n\n            },\n\n            load: () => {\n\n                // load all animations\n                const animations =\n                    [\n                        {\n                            key: 'virus-ball-healthy',\n                            frames: gameEngine.anims.generateFrameNumbers('virus_ball', {start: 0, end: 0}),\n                            repeat: 0\n                        },\n                        {\n                            key: 'virus-ball-damaged',\n                            frames: gameEngine.anims.generateFrameNumbers('virus_ball', {start: 1, end: 1}),\n                            repeat: 0\n                        },\n                        {\n                            key: 'virus-ball-destroy',\n                            frames: gameEngine.anims.generateFrameNumbers('virus_ball', {start: 1, end: 5}),\n                            frameRate: 15,\n                            repeat: 0,\n                            delay: 100,\n                        },\n                        {\n                            key: 'blue-slime-idle',\n                            frames: gameEngine.anims.generateFrameNumbers('blue_slime', {start: 0, end: 3}),\n                            repeat: -1,\n                            frameRate: 7\n                        },\n                        {\n                            key: 'blue-slime-moving',\n                            frames: gameEngine.anims.generateFrameNumbers('blue_slime', {start: 4, end: 7}),\n                            repeat: -1,\n                            frameRate: 7\n                        },\n                        {\n                            key: 'blue-slime-attacking',\n                            frames: gameEngine.anims.generateFrameNumbers('blue_slime', {start: 8, end: 11}),\n                            repeat: 0,\n                            frameRate: 7\n                        },\n                        {\n                            key: 'blue-slime-hurt',\n                            frames: gameEngine.anims.generateFrameNumbers('blue_slime', {start: 12, end: 15}),\n                            repeat: 0,\n                            frameRate: 7\n                        },\n                        {\n                            key: 'blue-slime-destroy',\n                            frames: gameEngine.anims.generateFrameNumbers('blue_slime', {start: 16, end: 19}),\n                            repeat: 0,\n                            frameRate: 7\n                        },\n                        {\n                            key: 'blue-slime-dead',\n                            frames: gameEngine.anims.generateFrameNumbers('blue_slime', {start: 20, end: 20}),\n                            repeat: -1,\n                            frameRate: 7\n                        },\n                        {\n                            key: 'blue_demon-idle',\n                            frames: gameEngine.anims.generateFrameNumbers('blue_demon', {start: 0, end: 5}),\n                            repeat: -1,\n                            frameRate: 7\n\n                        },\n                        {\n                            key: 'test_dummy-idle',\n                            frames: gameEngine.anims.generateFrameNumbers('test_dummy', {start: 0, end: 3}),\n                            repeat: -1,\n                            frameRate: 1\n\n                        },\n                    ];\n\n                animations.forEach((a) => gameEngine.anims.create(a));\n            },\n\n            createInteractiveBall: (x, y, radius, imageKey, health) => {\n\n                const ball = gameEngine.matter.add.sprite(x, y, 'virus_ball', null, {isStatic: true});\n\n                ball.setCircle(radius);\n\n\n                ball.setFriction(0.2,0.001,0.2);\n                ball.setMass(10);\n                ball.setDensity(0.03);\n                ball.setBounce(0.5);\n                ball.setFriction(0.4,0.01,0.4);\n\n                ball.anims.play('virus-ball-healthy', true);\n\n                ball.on('animationcomplete', (animation, frame) => {\n                    if (animation.key === 'virus-ball-destroy') {\n                        ball.destroy();\n                    }\n                }, this);\n\n\n                ball.body.zData = {\n                    zType: ['dead-object', 'melee-vulnerable'],\n                    zHealth: health,\n                    // Handle onDamage\n                    onDamage: (damageData) => {\n\n                        console.log(\"Ball got damage. \", damageData, ball.body.zData.zHealth);\n\n                        if (ball.body.zData.zHealth < 0) {\n                            // Trigger death animation and the listener above will call destroy when finished\n                            ball.anims.play('virus-ball-destroy', true);\n                        } else {\n                            ball.anims.play('virus-ball-damaged', true);\n                        }\n\n                        ball.body.zData.zHealth = ball.body.zData.zHealth - damageData.damage;\n\n\n\n                        // Got damaged by a thrust force, apply it\n                        if (damageData.angle && damageData.thrustForce) {\n                            if (damageData.angle < 180) {\n                                ball.angle = damageData.angle;\n                                ball.thrustBack(damageData.thrustForce);\n                            } else {\n                                ball.angle = damageData.angle;\n                                ball.thrust(damageData.thrustForce);\n                            }\n                        }\n                    }\n                };\n\n                return ball;\n            },\n\n            spawnBlueSlime: (x, y, health) => {\n\n                const blue_slime = gameEngine.matter.add.sprite(x, y, 'blue_slime', null, {isStatic: true}, {\n                    scale: { x: 2, y:2},\n                    density: 0.9,\n                    mass:40,\n                    friction: 0.8\n                });\n\n                console.log(\"Spawning blue slime at \",x, y);\n\n                blue_slime.scale = 2;\n                blue_slime.setRectangle(60,30);\n                blue_slime.setOrigin(0.5, 0.7);\n                blue_slime.setFriction(1,0.01,1);\n                blue_slime.setMass(120);\n                blue_slime.setDensity(0.9);\n                blue_slime.setBounce(0.3);\n\n\n                console.log(\"blue body\", blue_slime.body);\n\n                blue_slime.anims.play('blue-slime-idle', true);\n\n                blue_slime.on('animationcomplete', (animation, frame) => {\n                    if (animation.key === 'blue-slime-destroy') {\n                        blue_slime.destroy();\n                    }\n                    else if(animation.key === 'blue-slime-hurt') {\n                        blue_slime.anims.play('blue-slime-idle');\n                    }\n                }, this);\n\n\n\n                blue_slime.body.zData = {\n                    zType: ['dead-object', 'melee-vulnerable'],\n                    zHealth: health,\n                    // Handle onDamage\n                    onDamage: (damageData) => {\n\n                        console.log(\"Blue Slime got damage. \", damageData, blue_slime.body.zData.zHealth);\n\n                        if (blue_slime.body.zData.zHealth < 0) {\n                            // Trigger death animation and the listener above will call destroy when finished\n                            blue_slime.anims.play('blue-slime-destroy', true);\n                        } else {\n                            blue_slime.anims.play('blue-slime-hurt', true);\n\n                        }\n\n                        blue_slime.body.zData.zHealth = blue_slime.body.zData.zHealth - damageData.damage;\n\n\n\n                        // Got damaged by a thrust force, apply it\n                        if (damageData.angle && damageData.thrustForce) {\n                            if (damageData.angle < 180) {\n                                blue_slime.angle = damageData.angle;\n                                blue_slime.thrustBack(damageData.thrustForce);\n                            } else {\n                                blue_slime.angle = damageData.angle;\n                                blue_slime.thrust(damageData.thrustForce);\n                            }\n                        }\n                    },\n                    onGameUpdate: (slimesGameWorld) => {\n                       blue_slime.angle = 0;\n                    }\n                };\n\n                return blue_slime;\n            },\n\n            createStaticEnemy: (x, y, enemyId, health) => {\n\n                const demon = gameEngine.matter.add.sprite(x, y, enemyId, null, {isStatic: true});\n\n                demon.anims.play(`${enemyId}-idle`, true);\n\n                demon.on(`animationcomplete-${enemyId}-destroy`, (animation, frame) => {\n                        demon.destroy();\n                }, this);\n\n\n                demon.body.zData = {\n                    zType: ['melee-vulnerable', 'enemy','dead-object'],\n                    zHealth: health,\n                    // Handle onDamage\n                    onDamage: (damageData) => {\n\n                        if (demon.body.zData.zHealth < 0) {\n                            // Trigger death animation and the listener above will call destroy when finished\n                            demon.anims.play(`${enemyId}-destroy`, true);\n                        } else {\n                            demon.anims.play(`${enemyId}-damaged`, true);\n                        }\n\n                        demon.body.zData.zHealth = demon.body.zData.zHealth - damageData.damage;\n\n                        console.log(\"enemy got hit! Health left:\", demon.body.zData.zHealth );\n                        // Got damaged by a thrust force, apply it\n                        if (damageData.angle && damageData.thrustForce) {\n                            // blue demons are not affected by thrust force for now\n                        }\n                    }\n                };\n\n                return demon;\n            }\n        }\n\n    }\n}\n","import {Scene} from 'phaser'\nimport level_1_1 from '../world-1-1/createWorld';\n\nexport default class BootScene extends Scene {\n    constructor() {\n        super({\n            key: 'boot',\n            active: true\n        });\n        this.loadingImage = null;\n        this.clickHandler.bind(this);\n    }\n\n    preload() {\n        this.load.image('bar', './assets/loading.png');\n    }\n\n    create() {\n        this.loadingImage = this.add.image((this.game.canvas.width / 2) ,300,'bar');\n        this.loadingImage.setInteractive();\n        this.loadingImage.on('pointerup', this.clickHandler, this);\n    }\n\n    clickHandler() {\n        console.log(\"logo cliecked!\");\n        this.scene.add('level-1-1',level_1_1, true, { x: 0, y: 0 });\n        this.scene.remove(this);\n    }\n\n    update() {\n        const w2 = this.loadingImage.width / 2;\n        this.loadingImage.x = this.loadingImage.x + 5;\n\n        if(this.loadingImage.x > (this.game.canvas.width + w2 )) {\n            this.loadingImage.x = 0 - w2;\n        }\n    }\n}","import {Scene} from 'phaser'\n\nexport default class StatsScene extends Scene {\n    constructor() {\n        super({\n            key: 'stats',\n            active: true,\n        });\n    }\n\n    preload() {\n    }\n\n    create() {\n        this.statsInfo = this.add.text(10,20,\"Score: 0, Lives: 999\", {font: '16px Courier', fill: '#00ff33'}).setDepth(1000);\n    }\n\n    update() {\n        const worldScene = this.scene.get('level-1-1');\n        if(worldScene && worldScene.player && worldScene.player.getPlayerStats ) {\n\n            const stats = worldScene.player.getPlayerStats();\n            //   health: 100,\n            //         level: 1,\n            //         xp: 0,\n            this.statsInfo.setText(stats.STATUS.health+\"/\"+stats.STATUS.maxHealth + \" -- LEVEL:\"+stats.STATUS.level + \" -- XP:\"+stats.STATUS.xp + \" -- State:\"+stats.STATE + \" -- Speed:\"+stats.SPEED);\n        }\n    }\n}","import React, {useEffect} from 'react';\nimport newGame from './scripts/newGame';\nimport BootScene from './scripts/genericScenes/BootScene';\nimport StatsScene from './scripts/genericScenes/StatsScene';\n\n\nimport './App.css';\n\nfunction App() {\n\n    useEffect(() => {\n        newGame(\"main-canvas\", [StatsScene, BootScene]);\n    }, []);\n\n    return (\n        <div>\n            <div id=\"main-canvas\">\n            </div>\n        </div>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}